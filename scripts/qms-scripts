#!/usr/bin/env bash
# This script was generated by bashly 1.1.0 (https://bashly.dannyb.co)
# Modifying it manually is not recommended

# :wrapper.bash3_bouncer
if [[ "${BASH_VERSINFO:-0}" -lt 4 ]]; then
  printf "bash version 4 or higher is required\n" >&2
  exit 1
fi

# :command.master_script
# :command.root_command
root_command() {
  # src/root_command.sh
  cmd=${args[check]}
  path=${args[--path]}
  tags=${args[--tags]}
  manual=${args[--manual]:-0}

  # path is a directory containing feature files
  # tags is a string of tags separated by a comma
  # manual is a boolean

  # find all files in path that contain the tags
  # if manual is set, find all files in path that contain the tags and manual
  # return the list of files

  function find_sha {
    local sha_id=$(git tag -l 'release#*' | sort -V | tail -n 1 | xargs git rev-list -n 1)
    echo $sha_id
  }

  function find_files {
    local path=$1
    local tags=$2
    local manual=$3

    local files_since_sha=$(git diff --name-only $(find_sha) HEAD -- $path)
    if [ -n "$files_since_sha" ]; then
      if [ $manual -eq 1 ]; then
        local manual_files=$(echo "$files_since_sha" | xargs grep -l "manual")
        files_since_sha=$(comm -12 <(echo "$files_since_sha" | sort) <(echo "$manual_files" | sort))
      fi
    fi

    echo "$files_since_sha"

    # local files=$(find $path -name "*.feature" -exec grep -l "$tags" {} \;)
    # if [ $manual -eq 1 ]; then
    #  local manual_files=$(find $path -name "*.feature" -exec grep -l "manual" {} \;)
    #  files=$(comm -12 <(echo "$files" | sort) <(echo "$manual_files" | sort))
    # fi
    #  echo "$files"
  }

  # if cmd is check, find all files in path that contain the tags
  files=$(find_files $path "$tags" $manual)
  echo "$files"

}

# :command.version_command
version_command() {
  echo "$version"
}

# :command.usage
qms_scripts_usage() {
  if [[ -n $long_usage ]]; then
    printf "qms-scripts - Sample minimal application without commands\n"
    echo

  else
    printf "qms-scripts - Sample minimal application without commands\n"
    echo

  fi

  printf "%s\n" "Usage:"
  printf "  qms-scripts CHECK [TARGET] [OPTIONS]\n"
  printf "  qms-scripts --help | -h\n"
  printf "  qms-scripts --version | -v\n"
  echo

  # :command.long_usage
  if [[ -n $long_usage ]]; then
    printf "%s\n" "Options:"

    # :command.usage_flags
    # :flag.usage
    printf "  %s\n" "--path, -p PATH (required)"
    printf "    path to feature files\n"
    echo

    # :flag.usage
    printf "  %s\n" "--tags, -t TAGS (required)"
    printf "    tags to search for\n"
    echo

    # :flag.usage
    printf "  %s\n" "--manual, -m"
    printf "    search for @Manual tags\n"
    echo

    # :command.usage_fixed_flags
    printf "  %s\n" "--help, -h"
    printf "    Show this help\n"
    echo
    printf "  %s\n" "--version, -v"
    printf "    Show version number\n"
    echo

    # :command.usage_args
    printf "%s\n" "Arguments:"

    # :argument.usage
    printf "  %s\n" "CHECK"
    printf "    URL to download from\n"
    echo

    # :argument.usage
    printf "  %s\n" "TARGET"
    printf "    Target filename (default: same as source)\n"
    echo

    # :command.usage_examples
    printf "%s\n" "Examples:"
    printf "  ./qms-scripts --path /path/to/features --tags @IV\n"
    printf "  ./qms-scripts --path /path/to/features --tags @IV\n"
    echo

  fi
}

# :command.normalize_input
normalize_input() {
  local arg flags

  while [[ $# -gt 0 ]]; do
    arg="$1"
    if [[ $arg =~ ^(--[a-zA-Z0-9_\-]+)=(.+)$ ]]; then
      input+=("${BASH_REMATCH[1]}")
      input+=("${BASH_REMATCH[2]}")
    elif [[ $arg =~ ^(-[a-zA-Z0-9])=(.+)$ ]]; then
      input+=("${BASH_REMATCH[1]}")
      input+=("${BASH_REMATCH[2]}")
    elif [[ $arg =~ ^-([a-zA-Z0-9][a-zA-Z0-9]+)$ ]]; then
      flags="${BASH_REMATCH[1]}"
      for ((i = 0; i < ${#flags}; i++)); do
        input+=("-${flags:i:1}")
      done
    else
      input+=("$arg")
    fi

    shift
  done
}
# :command.inspect_args
inspect_args() {
  if ((${#args[@]})); then
    readarray -t sorted_keys < <(printf '%s\n' "${!args[@]}" | sort)
    echo args:
    for k in "${sorted_keys[@]}"; do echo "- \${args[$k]} = ${args[$k]}"; done
  else
    echo args: none
  fi

  if ((${#other_args[@]})); then
    echo
    echo other_args:
    echo "- \${other_args[*]} = ${other_args[*]}"
    for i in "${!other_args[@]}"; do
      echo "- \${other_args[$i]} = ${other_args[$i]}"
    done
  fi

  if ((${#deps[@]})); then
    readarray -t sorted_keys < <(printf '%s\n' "${!deps[@]}" | sort)
    echo
    echo deps:
    for k in "${sorted_keys[@]}"; do echo "- \${deps[$k]} = ${deps[$k]}"; done
  fi

}

# :command.command_functions

# :command.parse_requirements
parse_requirements() {
  # :command.fixed_flags_filter
  while [[ $# -gt 0 ]]; do
    case "${1:-}" in
      --version | -v)
        version_command
        exit
        ;;

      --help | -h)
        long_usage=yes
        qms_scripts_usage
        exit
        ;;

      *)
        break
        ;;

    esac
  done

  # :command.command_filter
  action="root"

  # :command.parse_requirements_while
  while [[ $# -gt 0 ]]; do
    key="$1"
    case "$key" in
      # :flag.case
      --path | -p)

        # :flag.case_arg
        if [[ -n ${2+x} ]]; then

          args['--path']="$2"
          shift
          shift
        else
          printf "%s\n" "--path requires an argument: --path, -p PATH" >&2
          exit 1
        fi
        ;;

      # :flag.case
      --tags | -t)

        # :flag.case_arg
        if [[ -n ${2+x} ]]; then

          args['--tags']="$2"
          shift
          shift
        else
          printf "%s\n" "--tags requires an argument: --tags, -t TAGS" >&2
          exit 1
        fi
        ;;

      # :flag.case
      --manual | -m)

        # :flag.case_no_arg
        args['--manual']=1
        shift
        ;;

      -?*)
        printf "invalid option: %s\n" "$key" >&2
        exit 1
        ;;

      *)
        # :command.parse_requirements_case
        # :command.parse_requirements_case_simple
        if [[ -z ${args['check']+x} ]]; then

          args['check']=$1
          shift
        elif [[ -z ${args['target']+x} ]]; then

          args['target']=$1
          shift
        else
          printf "invalid argument: %s\n" "$key" >&2
          exit 1
        fi

        ;;

    esac
  done

  # :command.required_args_filter
  if [[ -z ${args['check']+x} ]]; then
    printf "missing required argument: CHECK\nusage: qms-scripts CHECK [TARGET] [OPTIONS]\n" >&2
    exit 1
  fi

  # :command.required_flags_filter
  if [[ -z ${args['--path']+x} ]]; then
    printf "missing required flag: --path, -p PATH\n" >&2
    exit 1
  fi
  if [[ -z ${args['--tags']+x} ]]; then
    printf "missing required flag: --tags, -t TAGS\n" >&2
    exit 1
  fi

}

# :command.initialize
initialize() {
  version="0.1.0"
  long_usage=''
  set -e

}

# :command.run
run() {
  declare -A args=()
  declare -A deps=()
  declare -a other_args=()
  declare -a input=()
  normalize_input "$@"
  parse_requirements "${input[@]}"

  case "$action" in
    "root") root_command ;;
  esac
}

initialize
run "$@"
